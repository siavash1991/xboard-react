{"version":3,"file":"static/js/657.8dbb496b.chunk.js","mappings":"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","sources":["components/atoms/ComponentBody.tsx","components/atoms/ChartDropdownMenu.tsx","components/atoms/ComponentHeader.tsx","components/atoms/ComponentWrapper.tsx","components/atoms/GridContainer.tsx","components/pages/Charts/ApexCharts.tsx","hooks/useClickOutside.ts"],"sourcesContent":["import React, { ReactNode } from 'react';\r\n\r\ninterface ComponentBodyProps {\r\n\tclassName?: string;\r\n\tchildren: ReactNode;\r\n}\r\n\r\nconst ComponentBody: React.FC<ComponentBodyProps> = ({\r\n\tclassName = '',\r\n\tchildren,\r\n}) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tdata-testid=\"component-body\"\r\n\t\t\tclassName={`component-body p-10 pt-0 ${className}`}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ComponentBody;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport useClickOutside from '@hooks/useClickOutside';\r\nimport { CalendarIcon } from '@heroicons/react/24/outline';\r\n\r\ninterface XChartDropdownMenuProps {\r\n\tmenuLabel?: string;\r\n\tmenuItems: { id: string; label: string; onClick: () => void }[];\r\n\tmenuIcon?: React.ReactElement;\r\n\tarrowIcon?: React.ReactElement;\r\n}\r\n\r\nconst XChartDropdownMenu: React.FC<XChartDropdownMenuProps> = ({\r\n\tmenuIcon = <CalendarIcon className=\"h-5 w-5\" />,\r\n\tmenuItems,\r\n\tmenuLabel = '',\r\n\tarrowIcon = '',\r\n}) => {\r\n\tconst [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\tconst [dropdownPosition, setDropdownPosition] = useState<'left' | 'right'>(\r\n\t\t'right'\r\n\t);\r\n\tconst dropdownRef = useRef<HTMLDivElement>(null);\r\n\tconst buttonRef = useRef<HTMLButtonElement>(null);\r\n\r\n\tuseClickOutside(dropdownRef, () => {\r\n\t\tsetIsDropdownOpen(false);\r\n\t});\r\n\r\n\tconst toggleDropdown = () => {\r\n\t\tsetIsDropdownOpen((prev) => !prev);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (buttonRef.current && dropdownRef.current) {\r\n\t\t\tconst buttonRect = buttonRef.current.getBoundingClientRect();\r\n\t\t\tconst dropdownRect = dropdownRef.current.getBoundingClientRect();\r\n\r\n\t\t\t// Check if dropdown overflows the viewport on the right\r\n\t\t\tif (buttonRect.right + dropdownRect.width > window.innerWidth) {\r\n\t\t\t\tsetDropdownPosition('right');\r\n\t\t\t} else {\r\n\t\t\t\tsetDropdownPosition('left');\r\n\t\t\t}\r\n\t\t}\r\n\t}, [isDropdownOpen]);\r\n\r\n\treturn (\r\n\t\t<div className=\"relative\" data-testid=\"dropdown-menu-placeholder\">\r\n\t\t\t<button\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tclassName=\"flex items-center rtl:flex-row-reverse space-x-1 text-gray-500 hover:text-gray-900\"\r\n\t\t\t\tonClick={toggleDropdown}\r\n\t\t\t\tref={buttonRef}\r\n\t\t\t\taria-haspopup=\"true\"\r\n\t\t\t\taria-expanded={isDropdownOpen}\r\n\t\t\t\taria-label={\r\n\t\t\t\t\tmenuLabel\r\n\t\t\t\t\t\t? `Toggle ${menuLabel} dropdown`\r\n\t\t\t\t\t\t: 'Toggle dropdown'\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t{React.cloneElement(menuIcon, {\r\n\t\t\t\t\tclassName: 'h-5 w-5 ',\r\n\t\t\t\t})}\r\n\t\t\t\t{arrowIcon &&\r\n\t\t\t\t\tReact.cloneElement(arrowIcon as React.ReactElement, {\r\n\t\t\t\t\t\tclassName: 'h-5 w-5',\r\n\t\t\t\t\t})}\r\n\t\t\t\t{menuLabel && <span className=\"ml-2\">{menuLabel}</span>}{' '}\r\n\t\t\t</button>\r\n\t\t\t<div\r\n\t\t\t\tref={dropdownRef}\r\n\t\t\t\tclassName={`absolute top-full z-10 ${\r\n\t\t\t\t\tdropdownPosition === 'right' ? 'right-0' : 'left-0'\r\n\t\t\t\t} mt-2 w-44 bg-white dark:bg-gray-600 semi-dark:bg-gray-500 rounded-lg shadow-md ${\r\n\t\t\t\t\tisDropdownOpen ? '' : 'hidden'\r\n\t\t\t\t}`}\r\n\t\t\t\trole=\"menu\"\r\n\t\t\t\taria-labelledby={menuLabel ? `${menuLabel}-label` : undefined}\r\n\t\t\t>\r\n\t\t\t\t<ul className=\"py-1 text-gray-700 dark:text-white semi-dark:text-gray-200\">\r\n\t\t\t\t\t{menuItems.map((item) => (\r\n\t\t\t\t\t\t<li key={item.id}>\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\tclassName=\"block px-4 py-2 w-full text-left\"\r\n\t\t\t\t\t\t\t\tonClick={item.onClick}\r\n\t\t\t\t\t\t\t\taria-label={`Select ${item.label}`}\r\n\t\t\t\t\t\t\t\tid={item.id} // Adding a unique ID for testing\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{item.label}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default XChartDropdownMenu;\r\n","import React, { ReactElement, ReactNode } from 'react';\r\nimport { ArrowUpIcon, ArrowDownIcon } from '@heroicons/react/24/outline';\r\nimport ChartDropdownMenu from './ChartDropdownMenu';\r\n\r\ninterface MenuItem {\r\n\tid: string;\r\n\tlabel: string;\r\n\tonClick: () => void;\r\n}\r\n\r\ninterface XComponentHeaderProps {\r\n\tclassName?: string;\r\n\tchildren?: ReactNode;\r\n\ttitle?: string;\r\n\tsubtitle?: string;\r\n\tboldSubtitle?: boolean;\r\n\tvalue?: string; // Optional, for displaying a value like \"$78,000\"\r\n\tchangePercentage?: string; // Optional, for displaying change percentage\r\n\tisPositiveChange?: boolean; // Optional, to indicate if the change is positive or negative\r\n\tmenuItems?: MenuItem[];\r\n\tmenuIcon?: ReactElement;\r\n\tarrowIcon?: ReactElement;\r\n}\r\n\r\nconst XComponentHeader: React.FC<XComponentHeaderProps> = ({\r\n\tclassName = '',\r\n\tchildren,\r\n\ttitle,\r\n\tsubtitle,\r\n\tboldSubtitle = false,\r\n\tvalue,\r\n\tchangePercentage,\r\n\tisPositiveChange,\r\n\tmenuItems,\r\n\tmenuIcon,\r\n\tarrowIcon,\r\n}) => {\r\n\tconst renderValueAndChange = () => (\r\n\t\t<div className=\"flex items-center mt-2\">\r\n\t\t\t{value && (\r\n\t\t\t\t<h5\r\n\t\t\t\t\tclassName=\"text-gray-800 dark:text-gray-100 semi-dark:text-gray-200 mr-4\"\r\n\t\t\t\t\tdata-testid=\"value\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{value}\r\n\t\t\t\t</h5>\r\n\t\t\t)}\r\n\t\t\t{changePercentage && (\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName={`${\r\n\t\t\t\t\t\tisPositiveChange\r\n\t\t\t\t\t\t\t? 'bg-green-500 dark:bg-gray-500 text-green-600 dark:text-green-100'\r\n\t\t\t\t\t\t\t: 'bg-red-100 dark:bg-red-200 text-red-600 dark:text-red-100'\r\n\t\t\t\t\t} px-2 py-1 rounded flex items-center`}\r\n\t\t\t\t\tdata-testid=\"change-percentage\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{isPositiveChange ? (\r\n\t\t\t\t\t\t<ArrowUpIcon\r\n\t\t\t\t\t\t\tclassName=\"h-3 w-3\"\r\n\t\t\t\t\t\t\tdata-testid=\"arrow-up-icon\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<ArrowDownIcon\r\n\t\t\t\t\t\t\tclassName=\"h-3 w-3\"\r\n\t\t\t\t\t\t\tdata-testid=\"arrow-down-icon\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<span className=\"ml-1 text-sm\">{changePercentage}</span>\r\n\t\t\t\t</span>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tdata-testid=\"component-header\"\r\n\t\t\tclassName={`component-header flex items-center justify-between px-10 py-7 ${className}`}\r\n\t\t>\r\n\t\t\t<div className=\"component-title\">\r\n\t\t\t\t{title && (\r\n\t\t\t\t\t<h5\r\n\t\t\t\t\t\tclassName={`text-lg text-gray-900 dark:text-white semi-dark:text-gray-200 ${\r\n\t\t\t\t\t\t\tboldSubtitle ? 'font-normal' : 'font-semibold'\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tdata-testid=\"title\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{title}\r\n\t\t\t\t\t</h5>\r\n\t\t\t\t)}\r\n\t\t\t\t{subtitle && (\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tclassName={`${\r\n\t\t\t\t\t\t\tboldSubtitle\r\n\t\t\t\t\t\t\t\t? 'text-lg font-semibold text-gray-800 dark:text-white semi-dark:text-gray-300'\r\n\t\t\t\t\t\t\t\t: 'text-sm font-normal text-gray-500 dark:text-gray-500 semi-dark:text-gray-400'\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\tdata-testid=\"subtitle\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{subtitle}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t{children}\r\n\t\t\t{value || changePercentage\r\n\t\t\t\t? renderValueAndChange()\r\n\t\t\t\t: menuItems && (\r\n\t\t\t\t\t\t<ChartDropdownMenu\r\n\t\t\t\t\t\t\tmenuItems={menuItems}\r\n\t\t\t\t\t\t\tmenuIcon={menuIcon}\r\n\t\t\t\t\t\t\tarrowIcon={arrowIcon}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t  )}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default XComponentHeader;\r\n","import React, { ReactNode } from 'react';\r\n\r\ninterface ComponentWrapperProps {\r\n\tclassName?: string;\r\n\tchildren?: ReactNode;\r\n}\r\n\r\nconst XComponentWrapper: React.FC<ComponentWrapperProps> = ({\r\n\tclassName = '',\r\n\tchildren,\r\n}) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tdata-testid=\"component-wrapper\"\r\n\t\t\tclassName={`component-wrapper col-span-12 break-inside-avoid bg-component-light dark:bg-gray-600 semi-dark:bg-gray-500 mb-7 pb-1 ${className}`}\r\n\t\t>\r\n\t\t\t<div\r\n\t\t\t\tdata-testid=\"inner-wrapper\"\r\n\t\t\t\tclassName={`bg-white dark:bg-gray-700 semi-dark:bg-gray-600 rounded-lg h-full`}\r\n\t\t\t>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default XComponentWrapper;\r\n","import React from 'react';\r\n\r\nconst XGridContainer: React.FC<{\r\n\tchildren: React.ReactNode;\r\n\tclassName?: string;\r\n}> = ({ children, className = '' }) => (\r\n\t<div\r\n\t\tdata-testid=\"grid-container\"\r\n\t\tclassName={`grid grid-cols-12 gap-4 mb-7 ${className}`}\r\n\t>\r\n\t\t{children}\r\n\t</div>\r\n);\r\n\r\nexport default XGridContainer;\r\n","import React from 'react';\r\nimport XBaseLayout from '@templates/BaseLayout';\r\nimport XGridContainer from '@atoms/GridContainer';\r\n\r\nimport {\r\n\tXApexAreaCard,\r\n\tXApexBarCard,\r\n\tXApexTechnologiesCard,\r\n\tXApexBalanceCard,\r\n\tXApexBalanceHorizontalCard,\r\n\tXApexStocksPricesCard,\r\n} from '@organisms/Charts';\r\n\r\nconst XApexCharts: React.FC = () => {\r\n\treturn (\r\n\t\t<XBaseLayout pageTitle=\"Apex Charts\">\r\n\t\t\t<XGridContainer className=\"content-wrapper\">\r\n\t\t\t\t<XApexAreaCard />\r\n\t\t\t\t<XApexBarCard />\r\n\t\t\t\t<XApexTechnologiesCard />\r\n\t\t\t\t<XApexBalanceCard />\r\n\t\t\t\t<XApexBalanceHorizontalCard />\r\n\t\t\t\t<XApexStocksPricesCard />\r\n\t\t\t</XGridContainer>\r\n\t\t</XBaseLayout>\r\n\t);\r\n};\r\n\r\nexport default XApexCharts;\r\n","import { useEffect } from 'react';\r\n\r\nconst useClickOutside = (\r\n\tref: React.RefObject<HTMLElement>,\r\n\thandler: () => void\r\n) => {\r\n\tuseEffect(() => {\r\n\t\tconst handleClickOutside = (event: MouseEvent) => {\r\n\t\t\tif (ref.current && !ref.current.contains(event.target as Node)) {\r\n\t\t\t\thandler();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tdocument.addEventListener('mousedown', handleClickOutside);\r\n\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener('mousedown', handleClickOutside);\r\n\t\t};\r\n\t}, [ref, handler]);\r\n};\r\n\r\nexport default useClickOutside;\r\n"],"names":["_ref","className","children","_jsx","concat","menuIcon","CalendarIcon","menuItems","menuLabel","arrowIcon","isDropdownOpen","setIsDropdownOpen","useState","dropdownPosition","setDropdownPosition","dropdownRef","useRef","buttonRef","useClickOutside","useEffect","current","buttonRect","getBoundingClientRect","dropdownRect","right","width","window","innerWidth","_jsxs","type","onClick","toggleDropdown","prev","ref","React","role","undefined","map","item","label","id","title","subtitle","boldSubtitle","value","changePercentage","isPositiveChange","ArrowUpIcon","ArrowDownIcon","ChartDropdownMenu","XApexCharts","XBaseLayout","pageTitle","XGridContainer","XApexAreaCard","XApexBarCard","XApexTechnologiesCard","XApexBalanceCard","XApexBalanceHorizontalCard","XApexStocksPricesCard","handler","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener"],"sourceRoot":""}